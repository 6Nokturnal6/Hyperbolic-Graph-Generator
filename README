### Hyperbolic-Graph-Generator


The Hyperbolic-Graph-Generator is a package of tools to generate
graphs embedded in the hyperbolic plane, and to compute the efficiency
of greedy forwarding in these graphs.

More details on the graph models implemented in the package are available
at http://arxiv.org/abs/1503.05180/.

This standalone package is also a core component of the hyperbolic
routing package that is going to be integrated into the NDNSim (http://ndnsim.net).
Hyperbolic routing is greedy geometric routing in a
hyperbolically embedded network. Hyperbolic routing has attractive
scalability and efficiency characteristics. In particular, applied to
the AS Internet, hyperbolic routing is nearly optimal, i.e., maximally
scalable (http://dx.doi.org/10.1038/ncomms1063/). The NDN testbed has
been recently mapped to the hyperbolic plane yielding similar routing
efficiency (http://www.caida.org/research/routing/greedy_forwarding_ndn/).
Because of its exceptional scalability and efficiency characteristics,
hyperbolic routing is one of the routing strategies in the NDN
architecture.

The software package includes three tools (see README_INSTALL):
- hyperbolic_graph_generator
- graph_properties
- greedy_routing




### Description:

1) hyperbolic_graph_generator: A tool to generate synthetic graphs embedded into a hyperbolic space.

NAME: 
      hyperbolic_graph_generator - hyperbolic graphs generator 

SYNOPSIS: 
	  hg_graph_generator [options] [args] 

DESCRIPTION:
	The program generates random hyperbolic graphs according to
	http://dx.doi.org/10.1103/PhysRevE.82.036106


OPTIONS:
	-n	graph size (number of nodes)
		default value is 1000
	-k	expected average degree
		default value is 10
	-g	expected power-law exponent gamma
		default value is 2 (infinite gamma = 10)
	-t	temperature
		default value is 0 (infinite temperature = 10)
	-z	square root of curvature zeta=sqrt(-K)
	    or ratio eta=zeta/T in Soft Configuration Model
		default value is 1
	-s	random seed
		default value is 1
	-o	output folder
		default value is current folder
	-f	graph file name
		default value is graph (.hg extension is always added)
	-h	print help menu
	-q	quiet (no output)

OUTPUT FORMAT:
	The program outputs a graph using the following format.
	The first line describes the main graph parameters:
	N <num nodes> T <tempearature> G <gamma> K <avg.degree> Z <zeta> S <seed> I <initial_node_id>
	The following <num nodes> lines associate a polar coordinate
	to each node of the graph:
		node_id		radial coordinate	angular coordinate
	Finally, the links are listed:
		node_id  node_id

	Example:
	N	100	T	0	G	2	K	10	Z	2	S	1    I  1
	1	0.000301382	0.826476
	2	0.093611	2.88178
	3	0.0786131	1.37576
	... 
	99	0.10503	3.97561
	100	0.0713906	5.18173
	1	2
	1	3
	1	4
	...
	97	98
	98	99

EXAMPLE:

	# Generate a graph of 10,000 nodes with average degree 10,
 	# whose degrees follow a power-law distribution P(k) ~ k^{-2.5}
	# The graph is written in graph_example.hg
 	# All other parameters take default values
 
	hyperbolic_graph_generator -n 10000 -k 10 -g 2.5 -f graph_example






2) graph_properties: A tool to compute some basic graph properties of the generated hyperbolic graphs.

NAME: 
      graph_properties - hyperbolic graphs properties computation 

SYNOPSIS: 
	  graph_properties [options] [args] 

DESCRIPTION:
	The program computes the following graph properties:
	radial.txt contains pairs: <node id> <radial coordinate>
	angular.txt contains pairs: <node id> <angular coordinate>
	degree.txt contains pairs: <node id> <node degree>
	knn.txt contains pairs: <node id> <node avg. neigh. degree>
	cc.txt contains pairs: <node id> <node clustering coefficient>

OPTIONS:
	-i	graph file (in hg format)
		default value is ./graph.hg
	-o	output folder
		default value is current folder
	-h	print help menu
    	-q	quiet (no output)

EXAMPLE:
	
	graph_properties -i graph_example.hg







3) greedy_routing: A tool to test the greedy routing on hyperbolic graphs.

NAME: 
	greedy_routing - greedy routing success ratio computation. 

SYNOPSIS: 
	greedy_routing [options] [args] 

DESCRIPTION:
	Greedy routing performance test: it computes the greedy routing
	success ratio taking into account [a] (default 10000) random pairs
	belonging to the same connected component.

OPTIONS:
	-i	input graph file (in hg format)
		default value is ./graph.hg
	-a	number of attempts
		default value is 10000
	-s	random seed
		default value is 1
	-h	print help menu

EXAMPLE:

	# Test geometric greedy routing in the graph located in graph_example.hg
	# using 20,000 random pairs of nodes.
	# The seed for the random generator is 12345
	
	greedy_routing -i graph_example.hg -a 20000 -s 12345
